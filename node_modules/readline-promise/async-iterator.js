'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Credits
 * https://github.com/graphql/graphql-js/blob/master
 * /src/subscription/__tests__/eventEmitterAsyncIterator.js
 * https://github.com/leebyron/iterall/
 */
var SYMBOL_ASYNC_ITERATOR = typeof Symbol === 'function' && Symbol.asyncIterator;
var $$asyncIterator = SYMBOL_ASYNC_ITERATOR || '@@asyncIterator';

var AsyncIteratorBacking = function () {
  function AsyncIteratorBacking(values) {
    var _this2 = this;

    _classCallCheck(this, AsyncIteratorBacking);

    this.done = false;
    this.dataQueue = Array.isArray(values) ? values.slice() : [];
    this.awaitQueue = [];

    if (Array.isArray(values)) {
      values.length = 0;
      values.push = function (value) {
        return _this2._push(value);
      };
    }
  }

  AsyncIteratorBacking.prototype.iterator = function iterator() {
    var _this = this;
    var iterator = {
      next() {
        return _this.done ? iterator.return() : _this._next();
      },
      return() {
        _this._end();
        return Promise.resolve({ value: undefined, done: true });
      },
      throw(error) {
        _this._end();
        return Promise.reject(error);
      },
      [$$asyncIterator]() {
        return iterator;
      }
    };
    return iterator;
  };

  AsyncIteratorBacking.prototype._push = function _push(value) {
    return this._pushValue(value);
  };

  AsyncIteratorBacking.prototype._pushValue = function _pushValue(value) {
    return this.awaitQueue.length ? this.awaitQueue.shift()({ value, done: false }) : this.dataQueue.push(value);
  };

  AsyncIteratorBacking.prototype._next = function _next() {
    var _this3 = this;

    return new Promise(function (resolve) {
      if (_this3.dataQueue.length) {
        return resolve({
          value: _this3.dataQueue.shift(),
          done: false
        });
      } else if (_this3.done) {
        return resolve({
          value: undefined,
          done: true
        });
      }
      _this3.awaitQueue.push(resolve);
    });
  };

  AsyncIteratorBacking.prototype._end = function _end() {
    if (!this.done) {
      this.done = true;
      this.awaitQueue.forEach(function (resolve) {
        resolve({ value: undefined, done: true });
      });
      this.awaitQueue.length = 0;
      this.dataQueue.length = 0;
    }
  };

  return AsyncIteratorBacking;
}();

var AsyncIterator = function AsyncIterator() {
  _classCallCheck(this, AsyncIterator);

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return new (Function.prototype.bind.apply(AsyncIteratorBacking, [null].concat(args)))().iterator();
};

AsyncIterator.fromStream = function (stream, options) {
  var array = [];
  var opts = Object.assign({}, options);
  var DATA = opts.dataEvent || 'data';
  var CLOSE = opts.closeEvent || 'close';
  var backing = new AsyncIteratorBacking(array, opts);
  stream.on(DATA, function (value) {
    return array.push(value);
  });
  stream.on(CLOSE, function () {
    backing.done = true;
  });
  return backing.iterator();
};

exports.default = AsyncIterator;