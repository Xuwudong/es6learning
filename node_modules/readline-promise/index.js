'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _readline = require('readline');

var _readline2 = _interopRequireDefault(_readline);

var _asyncIterator = require('./async-iterator');

var _asyncIterator2 = _interopRequireDefault(_asyncIterator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Readline Promise
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Branden Horiuchi <bhoriuchi@gmail.com>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @license MIT
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description Provides a drop-in replacement for
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * readline with additional Promise based functions.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * uses an async iterator to iterate through the lines
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * as they are read
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


/**
 * Extends the readline Interface class with additional methods
 * that use native Promise objects to perform async operations
 */
var Interface = function (_readline$Interface) {
  _inherits(Interface, _readline$Interface);

  function Interface(input, output, completer, terminal) {
    _classCallCheck(this, Interface);

    return _possibleConstructorReturn(this, _readline$Interface.call(this, input, output, completer, terminal));
  }

  /**
   * Alias for forEach (backward compatibility)
   * @param {*} iteratee
   */


  Interface.prototype.each = function each(iteratee) {
    return this.forEach(iteratee);
  };

  /**
   * Iterates over each line and invokes the iteratee
   * @param {*} iteratee
   */


  Interface.prototype.forEach = function forEach(iteratee) {
    return this.reduce(function (accum, current, index, lines) {
      iteratee(current, index, lines);
      return accum;
    });
  };

  /**
   * performs a map operation on the lines
   * @param {*} iteratee
   */


  Interface.prototype.map = function map(iteratee) {
    return this.reduce(function (accum, current, index, lines) {
      accum.push(iteratee(current, index, lines));
      return accum;
    }, []);
  };

  /**
   * Performs a reduce operation on the lines
   * @param {*} iteratee
   * @param {*} accumulator
   */


  Interface.prototype.reduce = function reduce(iteratee, accumulator) {
    if (typeof iteratee !== 'function') {
      throw new Error('iteratee should be a function');
    }
    var values = [];
    var iterator = _asyncIterator2.default.fromStream(this, {
      dataEvent: 'line'
    });

    return Promise.resolve(accumulator).then(function (resolvedAccumulator) {
      var accum = resolvedAccumulator;
      var reducer = function reducer() {
        return iterator.next().then(function (_ref) {
          var value = _ref.value,
              done = _ref.done;

          if (!done) {
            var index = values.length;
            values.push(value);
            accum = iteratee(accum, value, index, values);
            return reducer();
          }
          return accum;
        });
      };
      return reducer();
    });
  };

  /**
   * Asks a question returns a promise
   * @param {*} query
   */


  Interface.prototype.questionAsync = function questionAsync(query) {
    var _this2 = this;

    return new Promise(function (resolve) {
      _this2.question(query, resolve);
    });
  };

  return Interface;
}(_readline2.default.Interface);

/**
 * Export an extended readline instance so
 * that it can be used as a drop in replacement
 */


exports.default = Object.assign({}, _readline2.default, {
  Interface,
  createInterface() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return new (Function.prototype.bind.apply(Interface, [null].concat(args)))();
  }
});